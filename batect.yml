project_name: terraform-batect-gcp

containers:
  build-env-client-app:
    image: node:12.10.0-alpine
    volumes:
      - local: ./app
        container: /code
        options: cached
    working_directory: /code

  build-env-server:
    image: node:12.10.0-alpine
    volumes:
      - local: ./server
        container: /code
        options: cached
    working_directory: /code

  google-cloud:
    build_directory: ./gcp
    volumes:
      - local: .
        container: /code
        options: cached
      - local: ./secret
        container: /secret
    working_directory: /code
    environment:
      PROJECT_NAME: ${PROJECT_NAME}

  terraform:
    build_directory: ./terraform
    volumes:
      - local: .
        container: /app
        options: cached
    working_directory: /app/terraform
    environment:
      PROJECT_NAME: ${PROJECT_NAME}
      WEB_APP: ${WEB_APP}
      TERRAFORM_STATE_STORE: ${TERRAFORM_STATE_STORE}

  docker-push-env:
    build_directory: .
    dockerfile: ./deploy/Dockerfile
    volumes:
      - local: .
        container: /code
        options: cached
      - local: ./secret
        container: /secret
      - local: /var/run/docker.sock
        container: /var/run/docker.sock
    working_directory: /code
    environment:
      PROJECT_NAME: ${PROJECT_NAME}
      WEB_APP: ${WEB_APP}
      IMAGE_PATH: gcr:io/${PROJECT_NAME}/${IMAGE_NAME}/web

  nginx-serving-assets:
    build_directory: ./app
    dockerfile: ./Dockerfile
    volumes:
      - local: ./app
        container: /app
        options: cached
    environment:
      PORT: "4567"
    ports:
      - 4567:4567

  express-backend:
    build_directory: ./server
    dockerfile: ./Dockerfile
    volumes:
      - local: ./server
        container: /code
        options: cached
    working_directory: /code
    environment:
      PORT: "3000"
    ports:
     - 3000:3000

tasks:
  setup-terraform-remote:
    group: Terraform Infra
    description: Setup a bucket in gcp for terraform remote state
    run:
      container: google-cloud
      command: sh -c './gcp/setupTerraformRemoteStorage.sh'

  init-terraform-with-remote:
    group: Infra
    description: Init terraform
    run:
      container: terraform
      command: sh -c './initialiseTerraform.sh'

  plan-web-infra:
    group: Infra
    description: Plan for creating the infra for the web app
    prerequisites:
      - init-terraform-with-remote
    run:
      container: terraform
      command: sh -c 'terraform plan -var project_name="$PROJECT_NAME" -var cluster_name="$CLUSTER_NAME" -out=current.tfplan'
      environment:
        CLUSTER_NAME: ${CLUSTER_NAME}

  apply-web-infra:
    group: Infra
    description: Create the infra for the web app
    prerequisites:
      - init-terraform-with-remote
    run:
      container: terraform
      command: sh -c 'terraform apply current.tfplan'

  destroy-web-infra:
    group: Infra
    description: Remove the infra for the web app
    run:
      container: terraform
      command: sh -c 'terraform destroy -var web_app_name="$WEB_APP"'

  build-client-app:
    description: Build the web assets
    group: Build
    run:
      container: build-env-client-app
      command: sh -c 'yarn && yarn build'

  build-server:
    description: Build the backend server
    group: Build
    run:
      container: build-env-server
      command: sh -c 'yarn'

  push-image:
    description: Build and push the image
    group: Deploy
    run:
      container: docker-push-env
      command: ./deploy/buildAndPushImage.sh
      environment:
        IMAGE_NAME: web

  deploy:
    description: Tell heroku to deploy the new version
    group: Deploy
    run:
      container: google-cloud
      command: ./deploy/deploy.sh
      environment:
        IMAGE_NAME: web
        CLUSTER_NAME: ${CLUSTER_NAME}

  local-app:
    description: Start the application.
    group: Local
    prerequisites:
      - build-client-app
    dependencies:
      - express-backend
    run:
      container: nginx-serving-assets

  local-server:
    description: Start just the backend
    group: Local
    prerequisites:
      - build-server
    run:
     container: express-backend
